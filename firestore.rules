rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/Users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isSuperAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/Users/$(request.auth.uid)).data.role == 'superadmin';
    }
    
    function isOwner(user_id) {
      return isAuthenticated() && request.auth.uid == user_id;
    }
    
    // Deny access by default
    match /{document=**} {
      allow read, write: if false;
    }
    
    // User rules
    match /Users/{user_id} {
      // Anyone can read basic user info (for showing borrower names, etc.)
      allow read: if isAuthenticated();
      
      // Users can read/update their own profiles
      allow write: if isOwner(user_id);
      
      // Admins can create/update/delete users
      allow write: if isAdmin();
      
      // Only superadmin can create other admins or modify admin status
      allow create, update: if isSuperAdmin() || 
                             (isAdmin() && !('role' in request.resource.data && 
                              (request.resource.data.role == 'admin' || 
                               request.resource.data.role == 'superadmin')));
    }
    
    // Book rules
    match /Books/{book_id} {
      // Anyone authenticated can read book info
      allow read: if isAuthenticated();
      
      // Only admins can create/update/delete books
      allow create, update, delete: if isAdmin();
    }
    
    // Borrow rules
    match /Borrows/{borrow_id} {
      // Admins can read all borrows
      allow read: if isAdmin();
      
      // Users can read their own borrows
      allow read: if isAuthenticated() && 
                  resource.data.borrowerId == request.auth.uid;
      
      // Only admins can create borrows (officially record a borrow)
      allow create: if isAdmin();
      
      // Only admins can update borrows (mark as returned, etc.)
      allow update: if isAdmin();
      
      // Only admins can delete borrow records
      allow delete: if isAdmin();
    }
    
    // Library settings collection (for app configuration)
    match /Settings/{settingId} {
      // Anyone can read settings
      allow read: if isAuthenticated();
      
      // Only admins can modify settings
      allow write: if isAdmin();
    }
    
    // Collection for invitation codes
    match /Invites/{inviteId} {
      // Only admins can read/write invites
      allow read, write: if isAdmin();
      
      // Public can read an invite if they have the exact ID
      allow read: if true;
    }
  }
}